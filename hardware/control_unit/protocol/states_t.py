"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class states_t(object):
    __slots__ = ["mode", "timestamp", "cartesian_position", "cartesian_velocity", "carriage_positions", "motor_angles", "motor_speeds", "motor_torques", "tensions", "cartesian_force", "error_flags", "armed"]

    __typenames__ = ["int16_t", "int64_t", "double", "double", "double", "double", "double", "double", "double", "double", "int16_t", "boolean"]

    __dimensions__ = [None, None, [3], [3], [3], [4], [4], [4], [4], [4], None, None]

    def __init__(self):
        self.mode = 0
        self.timestamp = 0
        self.cartesian_position = [ 0.0 for dim0 in range(3) ]
        self.cartesian_velocity = [ 0.0 for dim0 in range(3) ]
        self.carriage_positions = [ 0.0 for dim0 in range(3) ]
        self.motor_angles = [ 0.0 for dim0 in range(4) ]
        self.motor_speeds = [ 0.0 for dim0 in range(4) ]
        self.motor_torques = [ 0.0 for dim0 in range(4) ]
        self.tensions = [ 0.0 for dim0 in range(4) ]
        self.cartesian_force = [ 0.0 for dim0 in range(4) ]
        self.error_flags = 0
        self.armed = False

    def encode(self):
        buf = BytesIO()
        buf.write(states_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">hq", self.mode, self.timestamp))
        buf.write(struct.pack('>3d', *self.cartesian_position[:3]))
        buf.write(struct.pack('>3d', *self.cartesian_velocity[:3]))
        buf.write(struct.pack('>3d', *self.carriage_positions[:3]))
        buf.write(struct.pack('>4d', *self.motor_angles[:4]))
        buf.write(struct.pack('>4d', *self.motor_speeds[:4]))
        buf.write(struct.pack('>4d', *self.motor_torques[:4]))
        buf.write(struct.pack('>4d', *self.tensions[:4]))
        buf.write(struct.pack('>4d', *self.cartesian_force[:4]))
        buf.write(struct.pack(">hb", self.error_flags, self.armed))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != states_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return states_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = states_t()
        self.mode, self.timestamp = struct.unpack(">hq", buf.read(10))
        self.cartesian_position = struct.unpack('>3d', buf.read(24))
        self.cartesian_velocity = struct.unpack('>3d', buf.read(24))
        self.carriage_positions = struct.unpack('>3d', buf.read(24))
        self.motor_angles = struct.unpack('>4d', buf.read(32))
        self.motor_speeds = struct.unpack('>4d', buf.read(32))
        self.motor_torques = struct.unpack('>4d', buf.read(32))
        self.tensions = struct.unpack('>4d', buf.read(32))
        self.cartesian_force = struct.unpack('>4d', buf.read(32))
        self.error_flags = struct.unpack(">h", buf.read(2))[0]
        self.armed = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if states_t in parents: return 0
        tmphash = (0xf498eb754dc7e65d) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if states_t._packed_fingerprint is None:
            states_t._packed_fingerprint = struct.pack(">Q", states_t._get_hash_recursive([]))
        return states_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", states_t._get_packed_fingerprint())[0]

